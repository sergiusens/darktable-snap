--- src/iop/lens.cc.orig	2022-07-07 23:03:05.875676193 +0000
+++ src/iop/lens.cc	2022-07-07 16:57:08.363745944 +0000
@@ -41,11 +41,11 @@
 #include <ctype.h>
 #include <gtk/gtk.h>
 #include <inttypes.h>
-#include <math.h>
 #include <stdlib.h>
 #include <string.h>
 }
 
+#include <cmath>
 #include <lensfun.h>
 
 extern "C" {
@@ -439,7 +439,7 @@
         {
           for(int c = 0; c < 3; c++)
           {
-            if(d->do_nan_checks && (!isfinite(bufptr[c * 2]) || !isfinite(bufptr[c * 2 + 1])))
+            if(d->do_nan_checks && (!std::isfinite(bufptr[c * 2]) || !std::isfinite(bufptr[c * 2 + 1])))
             {
               out[c] = 0.0f;
               continue;
@@ -456,7 +456,7 @@
 
           if(mask_display & DT_DEV_PIXELPIPE_DISPLAY_MASK)
           {
-            if(d->do_nan_checks && (!isfinite(bufptr[2]) || !isfinite(bufptr[3])))
+            if(d->do_nan_checks && (!std::isfinite(bufptr[2]) || !std::isfinite(bufptr[3])))
             {
               out[3] = 0.0f;
               continue;
@@ -546,7 +546,7 @@
         {
           for(int c = 0; c < 3; c++)
           {
-            if(d->do_nan_checks && (!isfinite(buf2ptr[c * 2]) || !isfinite(buf2ptr[c * 2 + 1])))
+            if(d->do_nan_checks && (!std::isfinite(buf2ptr[c * 2]) || !std::isfinite(buf2ptr[c * 2 + 1])))
             {
               out[c] = 0.0f;
               continue;
@@ -561,7 +561,7 @@
           if(raw_monochrome) out[0] = out[2] = out[1];
           if(mask_display & DT_DEV_PIXELPIPE_DISPLAY_MASK)
           {
-            if(d->do_nan_checks && (!isfinite(buf2ptr[2]) || !isfinite(buf2ptr[3])))
+            if(d->do_nan_checks && (!std::isfinite(buf2ptr[2]) || !std::isfinite(buf2ptr[3])))
             {
               out[3] = 0.0f;
               continue;
@@ -992,7 +992,7 @@
     float *_out = out + (size_t)y * roi_out->width;
     for(int x = 0; x < roi_out->width; x++, bufptr += 6, _out++)
     {
-      if(d->do_nan_checks && (!isfinite(bufptr[2]) || !isfinite(bufptr[3])))
+      if(d->do_nan_checks && (!std::isfinite(bufptr[2]) || !std::isfinite(bufptr[3])))
       {
         *_out = 0.0f;
         continue;
@@ -1089,10 +1089,10 @@
         {
           const float x = buf[6 * k + c];
           const float y = buf[6 * k + c + 1];
-          xm = isnan(x) ? xm : MIN(xm, x);
-          xM = isnan(x) ? xM : MAX(xM, x);
-          ym = isnan(y) ? ym : MIN(ym, y);
-          yM = isnan(y) ? yM : MAX(yM, y);
+          xm = std::isnan(x) ? xm : MIN(xm, x);
+          xM = std::isnan(x) ? xM : MAX(xM, x);
+          ym = std::isnan(y) ? ym : MIN(ym, y);
+          yM = std::isnan(y) ? yM : MAX(yM, y);
         }
       }
     }
@@ -1100,10 +1100,10 @@
     dt_free_align(buf);
 
     // LensFun can return NAN coords, so we need to handle them carefully.
-    if(!isfinite(xm) || !(0 <= xm && xm < orig_w)) xm = 0;
-    if(!isfinite(xM) || !(1 <= xM && xM < orig_w)) xM = orig_w;
-    if(!isfinite(ym) || !(0 <= ym && ym < orig_h)) ym = 0;
-    if(!isfinite(yM) || !(1 <= yM && yM < orig_h)) yM = orig_h;
+    if(!std::isfinite(xm) || !(0 <= xm && xm < orig_w)) xm = 0;
+    if(!std::isfinite(xM) || !(1 <= xM && xM < orig_w)) xM = orig_w;
+    if(!std::isfinite(ym) || !(0 <= ym && ym < orig_h)) ym = 0;
+    if(!std::isfinite(yM) || !(1 <= yM && yM < orig_h)) yM = orig_h;
 
     const struct dt_interpolation *interpolation = dt_interpolation_new(DT_INTERPOLATION_USERPREF_WARP);
     roi_in->x = fmaxf(0.0f, xm - interpolation->width);
